import path from "path";
import process from "process";
import fs from "fs";
import {log} from "./log";
import * as Puppeteer from "puppeteer";
const logsPath = path.join(process.cwd(), 'logs', 'cypress.log');

export async function altXSS(url: string) {
    // another approach for reflected XSS.


    const dir = path.join(process.cwd(), 'lists', 'xss');
    const logDir = path.join(process.cwd(), 'logs', 'xss.log');

    let payloads: string[] = []
    if (fs.existsSync(dir)) {
        const fileContent = fs.readFileSync(dir, 'utf-8')
        payloads = fileContent.split('\n')
    } else {
        console.error('File does not exist:', logsPath)
        log(logDir, `Error. Cannot find payloads list: ${dir}`)
    }
    for(let i = 0; i < payloads.length;i++){
        const browser = await Puppeteer.launch({ headless: true, args: ["--no-sandbox", "--disable-setuid-sandbox"] })
        const page = await browser.newPage()
        const payload = url + payloads[i];
        // GET -> ?id=1 value von parameter ersetzen!
        let is_vulnerable = false
        log(logDir, `Payload ${i}: http://${payload}\n`)

        page.on("dialog", dialog =>{
            is_vulnerable = true
            dialog.accept()
        })

        await page.goto(payload)

        await browser.close()
        if(is_vulnerable){
            log(logDir, `XSS vulnerability found in ${url} with payload ${payload}\n`)
        }else{
            console.log("x");
        }
    }
    return null;
}