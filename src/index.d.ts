/// <reference types="cypress" />
import {Interception} from "cypress/types/net-stubbing";
declare global {
    namespace Cypress {
        export interface Chainable<Subject> {
            /**
             * Custom Command to test endpoints for sql injection
             * @param request - Request
             * @param injectable - string
             * @example cy.checkEndpoint(request, 'username')
             */
            checkEndpoint(
                request: any,
                injectable: string
            ): Chainable<any>;
            /**
             * Function to check for sql injection through the request header
             * @param request
             * @param headers
             */
            headerSQLi(
                request: any,
                headers: string[]
            ): Chainable<any>;

            /**
             * Custom Command to execute sqlmap from cypress test specification
             * @param route endpoint for sql injection
             * @param args sqlmap arguments
             */
            sqlMap(
                {
                    route: string,
                    args: Array
                }
            ): Chainable<any>;
            /**
             * Custom Command to test for reflected XSS.
             * @param request the intercepted request from Cypress.
             * @param getParams the get parameters from the request.
             */
            reflectedXSS(
                request: Interception,
                getParams: any
            ): Chainable<any>;

            /**
             * Custom Command to test for CSRF
             * @param request
             */
            csrf(
                request: Interception,
            ): Chainable<any>;

            /**
             * Custom Command to test for alternative XSS using puppeteer
             * @param url the url to test.
             */
            altXSS(
                url: string
            ): Cypress.Chainable<any>;

            /**
             * spawn a shell with an arbitrary command
             * @param command the command to be executed
             * @param args optional arguments
             */
            spawnShell(
                command: string,
                args: any
            ): Cypress.Chainable<any>;

            /**
             * function to test for stored XSS
             * @param request the intercepted request from Cypress.
             * @param getParams the get parameters from the request.
             */
            storedXSS(
                request: Interception,
                getParams: any
            ): Cypress.Chainable<any>;

            /**
             * function to test for CRLF injection
             * @param request the intercepted request from Cypress.
             */
            crlfInjection(
                request: Interception,
            ): Cypress.Chainable<any>;

            /**
             * function to test for header injection
             * @param request the intercepted request from Cypress.
             */
            checkHeaderFlags(
                request: Interception,
            ): Cypress.Chainable<any>;
        }
    }
}